#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å –∫—É—Ä—Å–æ—Ä–∞–º–∏ –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
 * –ó–∞–ø—É—Å–∫: node test-new-routes.mjs
 */

import fetch from 'node-fetch'

const BASE_URL = 'http://localhost:3000'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
async function makeRequest(method, endpoint, body = null) {
  try {
    const options = {
      method,
      headers: {
        'Content-Type': 'application/json'
      }
    }
    
    if (body) {
      options.body = JSON.stringify(body)
    }
    
    const response = await fetch(`${BASE_URL}${endpoint}`, options)
    const data = await response.json()
    
    return {
      status: response.status,
      data
    }
  } catch (error) {
    return {
      status: 'ERROR',
      data: { error: error.message }
    }
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–æ–≤
async function testCursors() {
  console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–æ–≤...')
  
  // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π —á–µ—Ä–µ–∑ –∫—É—Ä—Å–æ—Ä
  console.log('\n1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π —á–µ—Ä–µ–∑ –∫—É—Ä—Å–æ—Ä:')
  const cursorResult = await makeRequest('GET', '/articles/cursor?limit=5')
  console.log(`–°—Ç–∞—Ç—É—Å: ${cursorResult.status}`)
  console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π: ${cursorResult.data.count || 0}`)
  
  // 2. –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–µ–π
  console.log('\n2. –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–µ–π:')
  const processResult = await makeRequest('POST', '/articles/cursor/process', {
    batchSize: 5,
    operation: 'analyze'
  })
  console.log(`–°—Ç–∞—Ç—É—Å: ${processResult.status}`)
  console.log(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: ${processResult.data.totalProcessed || 0}`)
  
  // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π –ø–æ —Ç–µ–≥—É —á–µ—Ä–µ–∑ –∫—É—Ä—Å–æ—Ä
  console.log('\n3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π –ø–æ —Ç–µ–≥—É —á–µ—Ä–µ–∑ –∫—É—Ä—Å–æ—Ä:')
  const tagResult = await makeRequest('GET', '/articles/cursor/tags/javascript?limit=3')
  console.log(`–°—Ç–∞—Ç—É—Å: ${tagResult.status}`)
  console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π —Å —Ç–µ–≥–æ–º "javascript": ${tagResult.data.count || 0}`)
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
async function testAggregations() {
  console.log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...')
  
  // 1. –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\n1. –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
  const advancedStats = await makeRequest('GET', '/articles/stats/advanced')
  console.log(`–°—Ç–∞—Ç—É—Å: ${advancedStats.status}`)
  if (advancedStats.data.stats?.summary) {
    console.log(`–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π: ${advancedStats.data.stats.summary.totalArticles}`)
    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤: ${advancedStats.data.stats.summary.totalTags}`)
  }
  
  // 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–æ–≤
  console.log('\n2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–æ–≤:')
  const authorStats = await makeRequest('GET', '/articles/stats/authors')
  console.log(`–°—Ç–∞—Ç—É—Å: ${authorStats.status}`)
  console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ—Ä–æ–≤: ${authorStats.data.authors?.length || 0}`)
  
  // 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ —Ç–µ–≥–æ–≤
  console.log('\n3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ —Ç–µ–≥–æ–≤:')
  const tagStats = await makeRequest('GET', '/articles/stats/tags')
  console.log(`–°—Ç–∞—Ç—É—Å: ${tagStats.status}`)
  console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤: ${tagStats.data.tags?.length || 0}`)
  
  // 4. –ö–∞—Å—Ç–æ–º–Ω—ã–π –∞–≥—Ä–µ–≥–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
  console.log('\n4. –ö–∞—Å—Ç–æ–º–Ω—ã–π –∞–≥—Ä–µ–≥–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å:')
  const customResult = await makeRequest('POST', '/articles/stats/custom', {
    pipeline: [
      { "$match": { "status": "published" } },
      { "$group": { "_id": "$status", "count": { "$sum": 1 } } }
    ]
  })
  console.log(`–°—Ç–∞—Ç—É—Å: ${customResult.status}`)
  console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${JSON.stringify(customResult.data.result || [], null, 2)}`)
}

// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
async function testPerformance() {
  console.log('\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...')
  
  // –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
  console.log('\n1. –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–≤—Å–µ —Å—Ç–∞—Ç—å–∏):')
  const start1 = Date.now()
  const normalResult = await makeRequest('GET', '/articles')
  const time1 = Date.now() - start1
  console.log(`–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${time1}ms`)
  console.log(`–°—Ç–∞—Ç—É—Å: ${normalResult.status}`)
  
  // –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –∫—É—Ä—Å–æ—Ä
  console.log('\n2. –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –∫—É—Ä—Å–æ—Ä:')
  const start2 = Date.now()
  const cursorResult = await makeRequest('GET', '/articles/cursor?limit=50')
  const time2 = Date.now() - start2
  console.log(`–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${time2}ms`)
  console.log(`–°—Ç–∞—Ç—É—Å: ${cursorResult.status}`)
  
  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
  console.log('\nüìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:')
  console.log(`–û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å: ${time1}ms`)
  console.log(`–ö—É—Ä—Å–æ—Ä: ${time2}ms`)
  console.log(`–†–∞–∑–Ω–∏—Ü–∞: ${time1 - time2}ms`)
  
  if (time2 < time1) {
    console.log('‚úÖ –ö—É—Ä—Å–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ!')
  } else {
    console.log('‚ö†Ô∏è –ö—É—Ä—Å–æ—Ä –Ω–µ –ø–æ–∫–∞–∑–∞–ª —É–ª—É—á—à–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ, –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö)')
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤...')
  console.log(`–ë–∞–∑–æ–≤—ã–π URL: ${BASE_URL}`)
  
  try {
    await testCursors()
    await testAggregations()
    await testPerformance()
    
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!')
    console.log('\nüìù –î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ README.md')
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error.message)
    console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000')
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests() 